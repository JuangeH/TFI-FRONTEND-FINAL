@page "/Catalogo"

@using System.Net.Http.Json
@using InnoviaReach___TFI___FrontEnd.Data
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject ISessionStorageService sessionStorage
@inject NavigationManager NavManager

<section class="cat-sc-category" style="height: 100vh">
    <div class="cat-container">
        <div class="cat-sc-title">
            <h3 class="cat-h3">game <span>STORE</span></h3>
            <div class="cat-line"></div>
        </div>
        <div class="cat-button-group cat-mx-auto cat-flex cat-items-center cat-justify-center cat-flex-wrap">
            <button data-filter="action" class="cat-active-filter-button cat-button">action</button>
            <button data-filter="shooter" class="cat-button">shooter</button>
            <button data-filter="strategy" class="cat-button">strategy</button>
            <button data-filter="arcade" class="cat-button">arcade</button>
            <button data-filter="adventure" class="cat-button">adventure</button>
        </div>
        @if (!isForumsLoading)
        {
            <VideojuegoDetailDialog Show="@showPopup" OnClose="ClosePopup"></VideojuegoDetailDialog>
            <div class="cat-mt-16 cat-grid cat-gap-6 cat-sm:grid-cols-2 cat-md:grid-cols-3">
                @foreach (var item in videojuegos)
                {
                    <div class="cat-store-item" @onclick="OpenPopup">
                        <div class="cat-img-fit-cover">
                            <img class="cat-img" src="assets/Recomendaciones/images/store-1.png" alt="">
                        </div>
                        <div class="cat-store-item-info cat-group">
                            <h3 class="cat-h3 cat-uppercase cat-text-violet-darker cat-font-bold cat-tracking-[.04em] cat-mb-2 cat-group-hover:text-white cat-transition cat-ease-in-out cat-duration-300">Steam Store</h3>
                            <ul>
                                <li class="cat-text-dark cat-group-hover:text-white cat-transition cat-ease-in-out cat-duration-300">
                                    <span class="cat-me-1 cat-font-bold">Nombre:</span>
                                    <span>@item.Nombre</span>
                                </li>
                                <li class="cat-text-dark cat-group-hover:text-white cat-transition cat-ease-in-out cat-duration-300">
                                    <span class="cat-me-1 cat-font-bold">Recomendaciones:</span>
                                    <span>TBD</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                }
            </div>
            <div class="d-flex flex-column align-center catalogo-pagination">
                <MudPagination @bind-SelectedPage="currentPage"
                           Count="totalPages"
                           ShowFirstButton="true"
                           ShowLastButton="true"
                           SelectedChanged="PageChanged"
                           Class="mt-4" />
            </div>
        }
        else
        {
            <SpinnerLoading show=@isForumsLoading />
        }
    </div>
</section>

@code {
    public IEnumerable<VideojuegoForoReponse> videojuegos = new List<VideojuegoForoReponse>();
    private bool isForumsLoading;
    private int currentPage = 1;
    private int totalPages;
    private int pageSize = 21;
    private int totalRecords;

    private bool showPopup = false;

    private void OpenPopup()
    {
        showPopup = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                try
                {
                    var user = await sessionStorage.GetItemAsync<LoginTokenResponse>("user");
                    httpClient.DefaultRequestHeaders.Clear();
                    httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", user.Token);
                    Snackbar.Clear();
                    Snackbar.Add("Conecta tu cuenta de Steam", Severity.Info, (options) =>
                    {
                        options.CloseAfterNavigation = false;
                        options.Onclick = snackbar =>
                        {
                            NavManager.NavigateTo("/Config");
                            return Task.CompletedTask;
                        };
                        //config.Onclick = snackbar =>
                        //{
                        //    SayHello();
                        //    return Task.CompletedTask;
                        //};
                    });
                    await LoadData();
                }
                catch (Exception)
                {

                }

                await Task.Delay(3000);
            }
        }
        catch (Exception)
        {

        }
        finally
        {
            isForumsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isForumsLoading = true;
        StateHasChanged();
    }

    private async Task LoadData()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<PaginationResponse<VideojuegoForoReponse>>($"Videojuego/ObtenerVideojuegosCatalogo?pageNumber={currentPage}&pageSize={pageSize}");
            videojuegos = response.Videojuegos;
            totalRecords = response.TotalRecords;
            totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
        }
        catch (Exception ex)
        {
            // Handle error
        }
    }

    private async Task PageChanged(int page)
    {
        currentPage = page;
        await LoadData();
    }
}
