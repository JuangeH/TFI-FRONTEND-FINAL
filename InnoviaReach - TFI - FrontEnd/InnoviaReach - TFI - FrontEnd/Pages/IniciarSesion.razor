@layout LoginLayout
@page "/login"

<PageTitle>Inicio de sesión</PageTitle>

@using System.ComponentModel.DataAnnotations
@using InnoviaReach___TFI___FrontEnd.Components
@using InnoviaReach___TFI___FrontEnd.Data
@inject HttpClient httpClient
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using System.Net.Http.Json
@using Newtonsoft.Json

<div class="login-container">
    <div class="form-wrapper">
        <main class="form-side">
            <a href="#" title="Logo">
                <img src="assets/Iniciar sesion/laplace.svg" alt="Laplace Logo" class="logo">
            </a>
            <form class="my-form login" @onsubmit=Submit>
                <div class="form-welcome-row">
                    <h1>Welcome back! &#128079;</h1>
                    <h2>Login with your account!</h2>
                </div>
                <div class="socials-row">
                    <a href="#" title="Use Github">
                        <img src="assets/Iniciar sesion/google.png" alt="Google">
                        Continue with Google
                    </a>
                </div>
                <div class="divider">
                    <div class="divider-line"></div>
                    or
                    <div class="divider-line"></div>
                </div>
                <div class="text-field">
                    <label for="email">Email</label>
                    <input @bind-value=_loginRequest.username type="email" id="email" name="email" autocomplete="off" placeholder="you@example.com"
                           required>
                    <div class="error-message">Email in incorrect format</div>
                </div>
                <div class="text-field">
                    <label for="password">Password</label>
                    <input @bind-value=_loginRequest.password id="password" type="password" name="password" placeholder="Your password" title="Minimum 6 characters at
                                                        least 1 Alphabet and 1 Number">
                    <div class="error-message">
                        Minimum 6 characters at
                        least 1 Alphabet and 1 Number
                    </div>
                </div>
                <button class="my-form__button" type="submit" disabled="@isSubmitting">
                    Sign In
                </button>
                <div class="my-form__actions">
                    <div class="my-form__row">
                        <span>Don't have an account?</span>
                        <a @onclick=Register title="Reset Password">
                            Sign Up Now
                        </a>
                    </div>
                </div>
            </form>
        </main>
        <aside class="info-side">
            <div class="blockquote-wrapper">
                <img src="assets/Iniciar sesion/returns.png" alt="Returns" class="returns">
                <blockquote>
                    With Laplace, I have significantly outperformed S&P 500 in the last three
                    years.
                </blockquote>
                <div class="author">
                    <img src="assets/Iniciar sesion/avatar.png" alt="Avatar" class="avatar">
                    <span class="author-name">ai_trader</span>
                </div>
            </div>
        </aside>
    </div>
</div>

@code {
    bool isSubmitting = false;
    bool success;
    LoginRequest _loginRequest = new LoginRequest();
    [Inject]
    private ISessionStorageService _sessionStorageService { get; set; }

    protected async Task Submit()
    {
        if (isSubmitting) return; // Prevenir múltiples envíos
        isSubmitting = true; // Deshabilitar el botón de envío

        try
        {
            string url = "https://localhost:44308/Auth/Login?username=" + _loginRequest.username + "&password=" + _loginRequest.password;
            var response = await httpClient.PostAsJsonAsync(url, _loginRequest);

            if (response.IsSuccessStatusCode)
            {
                string content = await response.Content.ReadAsStringAsync();
                LoginTokenResponse login = JsonConvert.DeserializeObject<LoginTokenResponse>(content) ?? throw new Exception("Ocurrió un error");
                await _sessionStorageService.SetItemAsync("user", login);

                NavManager.NavigateTo("/");
            }
            else
            {
                throw new Exception("Error");
            }
        }
        catch (Exception ex)
        {
            await DialogService.Show<DialogError>(ex.Message).Result;
        }
        finally
        {
            isSubmitting = false; // Habilitar el botón de envío de nuevo
        }
    }
    protected async Task Register()
    {
        try
        {
            NavManager.NavigateTo("/Registro");
        }
        catch (Exception ex)
        {

        }

    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}
